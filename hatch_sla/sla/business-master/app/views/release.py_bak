# -*- coding: utf-8 -*-

from flask import  render_template, Response, request
from app.db import MySQL_query, Cache_query
from .query_time import get_time


def release_common(sql, judge_host):
    result_list = []
    cache_object = Cache_query()

    start_time, end_time, old_time, query_time= get_time()   #query_time for ava.htm
    print(start_time, end_time, old_time, query_time)
    path = request.path

    cache_key = query_time + "__" + start_time + "__" + path.replace('/', '_')   
    print(cache_key)
    cache = cache_object.get_redis(cache_key)

    if cache:
        print("okokokookokokokokokokk")
        result_tuple = tuple(eval(cache))
        result_list = result_tuple
    else:
        print("nonononononoononono")

        # 获取业务线信息
        mysql_object = MySQL_query()
        fields = ['id', 'name', 'name_english', 'person']
        result = mysql_object.mysql_RowProxy_to_list(sql, fields, 'cmdb')
        print(result)
        if result:
            for i in range(len(result)):
                result_str = ''
                id = result[i]['id']
                name = result[i]['name']
                name_english = result[i]['name_english']
                person = result[i]['person']

                ## 根据业务线信息获取主机列表，业务线和项目没有直接匹配关系
                if judge_host == "business":
                    host_sql = "select hostname from asset where business_id=%s" % id
                elif judge_host == "subbusiness":
                    host_sql = "select hostname from asset where sub_business_id=%s" % id
                else:
                    exit()
                all_host = mysql_object.sql_query(host_sql, 'cmdb')
        
                ## 根据主机信息 间接获取那个项目属于哪个业务线
                for i in range(len(all_host)):
                        result_str = result_str +  all_host[i][0] + "%%' or onlinehost like '%%"
                fuck = "onlinehost like '%%" + result_str + "fuckfuck%%'"  
                ## cmdb 的 gitlab_pid 叫 git_group       
                gitlab_sql = "select git_group from projects  where %s" % fuck
                print(gitlab_sql)
                gitlab_pids = mysql_object.mysql_RowProxy_to_str(gitlab_sql, 'cmdb')
                
                if gitlab_pids:
                    release_json = {}
                    print("进入earthworm")
                    earthworm_release_sql = "select count(*) as earthworm_release_count from project_gitlab left join release_apply on project_gitlab.project_id=release_apply.project_id  \
                        where \
                        (release_apply.online_task_id is not null or release_apply.online_gray_task_id is not null ) and  \
                        project_gitlab.gitlab_pid in (%s) and  \
                        (release_apply.create_time>'%s 24:00' and release_apply.create_time<='%s 24:00') " % (gitlab_pids, end_time, start_time)

                    print(earthworm_release_sql)
                    earthworm_release = mysql_object.sql_query(earthworm_release_sql, 'earthworm')
                    earthworm_release_count = earthworm_release[0][0]

                    print("进入medusa")
                    medusa_release_sql = "select count(*) as medusa_release_count from app left join app_deploy_history on app.id=app_deploy_history.app_id  \
                        where app_deploy_history.deploy_status = 'success' and   \
                        app_deploy_history.cluster = 'online' and  \
                        app.gitlab_pid in (%s)  and   \
                        (app_deploy_history.created_at>'%s 24:00' and app_deploy_history.created_at<='%s 24:00') " % (gitlab_pids, end_time, start_time)
                    print(medusa_release_sql)
                    medusa_release = mysql_object.sql_query(medusa_release_sql, 'medusa')
                    medusa_release_count = medusa_release[0][0]

                    release_json['earthworm_release_count'] = earthworm_release_count
                    release_json['medusa_release_count'] = medusa_release_count
                    release_json['name'] = name
                    release_json['name_english'] = name_english
                    release_json['person'] = person
                    release_json['query_time'] = query_time
                    result_list.append(release_json)

            # result_list 排序，进缓存
            result_list.sort(key=lambda  x:(x['earthworm_release_count'],x['medusa_release_count']), reverse=False)
            cache_object.set_redis(cache_key,result_list)
        
    earthworm_release = 0
    medusa_release = 0
    for i in range(len(result_list)):
        earthworm_release = earthworm_release + result_list[i]['earthworm_release_count']
        medusa_release = medusa_release + result_list[i]['medusa_release_count']
            
    print(result_list)
    return result_list, earthworm_release, medusa_release
        

def release_business():
    sql = "select id, name, name_english, person_duty as person from business"
    result, earthworm_release, medusa_release = release_common(sql, 'business')
    url = request.url   
    url = url.split('?')[0] 
    return  render_template('release.html', re=result, url=url, earthworm_release=earthworm_release, medusa_release=medusa_release)
    
    
def release_subbusiness(business_name_english):
    sql = "select subbusiness.id, subbusiness.name, subbusiness.name_english, subbusiness.person from business left join subbusiness \
           on subbusiness.business_id=business.id where business.name_english='%s' " % business_name_english
    result, earthworm_release, medusa_release = release_common(sql, 'subbusiness')
    url = request.url   
    url = url.split('?')[0] 
    if result:
        return  render_template('release.html', re=result, url=url, earthworm_release=earthworm_release, medusa_release=medusa_release)
    else:
        return Response("请输入正确的链接", mimetype='application/json')



